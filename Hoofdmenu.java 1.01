package gamesuite;

import java.awt.event.KeyEvent;
import java.awt.event.ActionListener;
import java.awt.event.ActionEvent;
import java.awt.Color;
import java.awt.Event;
import java.awt.BorderLayout;
import java.awt.Frame;

import javax.swing.JInternalFrame;
import javax.swing.JDesktopPane;

import java.awt.event.*;
import java.awt.*;

import javax.swing.SwingConstants;
import javax.swing.SwingUtilities;
import javax.swing.KeyStroke;
import java.awt.Point;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JMenuItem;
import javax.swing.JMenuBar;
import javax.swing.JMenu;
import javax.swing.JFrame;
import javax.swing.JDialog;
import java.awt.Dimension;
import javax.swing.JButton;

import vieropeenrij.VierOpEenRijSpelHedde;
import vieropeenrij.vierOpEenRijSpel;

import java.awt.Rectangle;
import gamesuite.Spel;





public class Hoofdmenu {

	private JFrame jFrame = null;  //  @jve:decl-index=0:visual-constraint="10,10"
	private JPanel jContentPane = null;
	private JMenuBar jJMenuBar = null;
	private JMenu fileMenu = null;
	private JMenu editMenu = null;
	private JMenu helpMenu = null;
	private JMenuItem exitMenuItem = null;
	private JMenuItem aboutMenuItem = null;
	private JMenuItem cutMenuItem = null;
	private JMenuItem copyMenuItem = null;
	private JMenuItem pasteMenuItem = null;
	private JMenuItem saveMenuItem = null;
	private JDialog aboutDialog = null;  //  @jve:decl-index=0:visual-constraint="820,68"
	private JPanel aboutContentPane = null;
	private JLabel aboutVersionLabel = null;
	private JButton dammenKnop = null;
	private JButton blackjackKnop = null;
	private JButton memoryKnop = null;
	private JButton vierOpEenRijKnop = null;
	private JLabel highscoreLabel = null;
	private JButton voegNieuwSpelToeKnop = null;
	private JInternalFrame InternalFrame = null;
	private JDesktopPane jDesktopPane = null;
	
	
	
	
	
	// hier komt een mijnInit met startwaarden voor het hoofdmenu!
	
	
	
	// eigen private methoden:
	
	private void VierOpEenRijKnopAction(){
		//http://docs.oracle.com/javase/7/docs/api/javax/swing/JInternalFrame.html
		
		// die frames mogen wel in één methode later voor elk spel
		
		JInternalFrame InternalFrame = new JInternalFrame("Frame voor spellen", false, true, true);
		//Frame nieuwFrame = new Frame("Speel vier op een rij");
		vierOpEenRijSpel nieuw = new vierOpEenRijSpel();
		nieuw.init();
		//setSize moet eigenlijk getSize van de desktoppane worden denk ik
		InternalFrame.setSize(800, 600);
		// hier gaat ook iets mis: waarom geeft hij het spel niet weer in het midden?
		InternalFrame.add(nieuw, BorderLayout.CENTER);
		//wat doet deze precies?
		InternalFrame.pack();
		jDesktopPane.add(InternalFrame, BorderLayout.CENTER);
		InternalFrame.setVisible(true);
	
		//jFrame.remove bij terugknop
	}
	
	
	
	
	
	
	
	
	
	
	
	
	/**
	 * This method initializes dammenKnop	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getDammenKnop() {
		if (dammenKnop == null) {
			dammenKnop = new JButton();
			dammenKnop.setText("Dammen");
			dammenKnop.setLocation(new Point(157, 46));
			dammenKnop.setPreferredSize(new Dimension(140, 140));
			dammenKnop.setSize(new Dimension(140, 140));
		}
		return dammenKnop;
	}

	/**
	 * This method initializes blackjackKnop	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getBlackjackKnop() {
		if (blackjackKnop == null) {
			blackjackKnop = new JButton();
			blackjackKnop.setPreferredSize(new Dimension(140, 140));
			blackjackKnop.setLocation(new Point(324, 46));
			blackjackKnop.setSize(new Dimension(140, 134));
			blackjackKnop.setText("Blackjack");
		}
		return blackjackKnop;
	}

	/**
	 * This method initializes memoryKnop	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getMemoryKnop() {
		if (memoryKnop == null) {
			memoryKnop = new JButton();
			memoryKnop.setPreferredSize(new Dimension(140, 140));
			memoryKnop.setLocation(new Point(157, 204));
			memoryKnop.setSize(new Dimension(140, 140));
			memoryKnop.setText("Memory");
		}
		return memoryKnop;
	}

	/**
	 * This method initializes vierOpEenRijKnop	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getVierOpEenRijKnop() {
		if (vierOpEenRijKnop == null) {
			vierOpEenRijKnop = new JButton();
			vierOpEenRijKnop.setText("Vier op een rij");
			vierOpEenRijKnop.setSize(new Dimension(140, 140));
			vierOpEenRijKnop.setPreferredSize(new Dimension(140, 140));
			vierOpEenRijKnop.setLocation(new Point(324, 204));
			vierOpEenRijKnop.addActionListener(new java.awt.event.ActionListener() {
				public void actionPerformed(java.awt.event.ActionEvent e) {
					System.out.println("Geklikt op vier op een rij knop"); // TODO Auto-generated Event stub actionPerformed()
					VierOpEenRijKnopAction();
				}
			});
		}
		return vierOpEenRijKnop;
	}

	/**
	 * This method initializes voegNieuwSpelToeKnop	
	 * 	
	 * @return javax.swing.JButton	
	 */
	private JButton getVoegNieuwSpelToeKnop() {
		if (voegNieuwSpelToeKnop == null) {
			voegNieuwSpelToeKnop = new JButton();
			voegNieuwSpelToeKnop.setBounds(new Rectangle(157, 372, 140, 140));
			voegNieuwSpelToeKnop.setText("Spel toevoegen");
			voegNieuwSpelToeKnop.setPreferredSize(new Dimension(140, 140));
			voegNieuwSpelToeKnop.setBackground(Color.GRAY);
		}
		return voegNieuwSpelToeKnop;
	}



	/**
	 * This method initializes jFrame
	 * 
	 * @return javax.swing.JFrame
	 */
	private JFrame getJFrame() {
		if (jFrame == null) {
			jFrame = new JFrame();
			jFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
			jFrame.setJMenuBar(getJJMenuBar());
			jFrame.setSize(800, 600);
			jFrame.setContentPane(getJContentPane());
			jFrame.setTitle("Application");
			
		}
		return jFrame;
	}

	/**
	 * This method initializes jContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	
	//Verschillen contentpane en desktoppane?
	//anders kunnen al deze elementen naar desktop:
	
	
	private JPanel getJContentPane() {
		if (jContentPane == null) {
			highscoreLabel = new JLabel();
			highscoreLabel.setBounds(new Rectangle(511, 46, 156, 295));
			highscoreLabel.setVerticalAlignment(SwingConstants.TOP);
			highscoreLabel.setText("Persoonlijke Highscores:");
			jContentPane = new JPanel();
			jContentPane.setLayout(null);
			jContentPane.add(getDammenKnop(), null);
			jContentPane.add(getBlackjackKnop(), null);
			jContentPane.add(getMemoryKnop(), null);
			jContentPane.add(getVierOpEenRijKnop(), null);
			jContentPane.add(highscoreLabel, null);
			jContentPane.add(getVoegNieuwSpelToeKnop(), null);
			jContentPane.add(getJDesktopPane(), null);
		}
		return jContentPane;
	}

	/**
	 * This method initializes jJMenuBar	
	 * 	
	 * @return javax.swing.JMenuBar	
	 */
	private JMenuBar getJJMenuBar() {
		if (jJMenuBar == null) {
			jJMenuBar = new JMenuBar();
			jJMenuBar.add(getFileMenu());
			jJMenuBar.add(getEditMenu());
			jJMenuBar.add(getHelpMenu());
		}
		return jJMenuBar;
	}

	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getFileMenu() {
		if (fileMenu == null) {
			fileMenu = new JMenu();
			fileMenu.setText("Spel");
			fileMenu.add(getSaveMenuItem());
			fileMenu.add(getExitMenuItem());
		}
		return fileMenu;
	}

	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getEditMenu() {
		if (editMenu == null) {
			editMenu = new JMenu();
			editMenu.setText("Instellingen");
			editMenu.add(getCutMenuItem());
			editMenu.add(getCopyMenuItem());
			editMenu.add(getPasteMenuItem());
		}
		return editMenu;
	}

	/**
	 * This method initializes jMenu	
	 * 	
	 * @return javax.swing.JMenu	
	 */
	private JMenu getHelpMenu() {
		if (helpMenu == null) {
			helpMenu = new JMenu();
			helpMenu.setText("Info");
			helpMenu.add(getAboutMenuItem());
		}
		return helpMenu;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getExitMenuItem() {
		if (exitMenuItem == null) {
			exitMenuItem = new JMenuItem();
			exitMenuItem.setText("Exit");
			exitMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					System.exit(0);
				}
			});
		}
		return exitMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getAboutMenuItem() {
		if (aboutMenuItem == null) {
			aboutMenuItem = new JMenuItem();
			aboutMenuItem.setText("About");
			aboutMenuItem.addActionListener(new ActionListener() {
				public void actionPerformed(ActionEvent e) {
					JDialog aboutDialog = getAboutDialog();
					aboutDialog.pack();
					Point loc = getJFrame().getLocation();
					loc.translate(20, 20);
					aboutDialog.setLocation(loc);
					aboutDialog.setVisible(true);
				}
			});
		}
		return aboutMenuItem;
	}

	/**
	 * This method initializes aboutDialog	
	 * 	
	 * @return javax.swing.JDialog
	 */
	private JDialog getAboutDialog() {
		if (aboutDialog == null) {
			aboutDialog = new JDialog(getJFrame(), true);
			aboutDialog.setTitle("About");
			aboutDialog.setContentPane(getAboutContentPane());
		}
		return aboutDialog;
	}

	/**
	 * This method initializes aboutContentPane
	 * 
	 * @return javax.swing.JPanel
	 */
	private JPanel getAboutContentPane() {
		if (aboutContentPane == null) {
			aboutContentPane = new JPanel();
			aboutContentPane.setLayout(new BorderLayout());
			aboutContentPane.add(getAboutVersionLabel(), BorderLayout.CENTER);
		}
		return aboutContentPane;
	}

	/**
	 * This method initializes aboutVersionLabel	
	 * 	
	 * @return javax.swing.JLabel	
	 */
	private JLabel getAboutVersionLabel() {
		if (aboutVersionLabel == null) {
			aboutVersionLabel = new JLabel();
			aboutVersionLabel.setText
			("Version 1.0 : " +
					" Developers: Jeroen, Daan & Hedde");
			aboutVersionLabel.setHorizontalAlignment(SwingConstants.CENTER);
		}
		return aboutVersionLabel;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getCutMenuItem() {
		if (cutMenuItem == null) {
			cutMenuItem = new JMenuItem();
			cutMenuItem.setText("Cut");
			cutMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_X,
					Event.CTRL_MASK, true));
		}
		return cutMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getCopyMenuItem() {
		if (copyMenuItem == null) {
			copyMenuItem = new JMenuItem();
			copyMenuItem.setText("Copy");
			copyMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_C,
					Event.CTRL_MASK, true));
		}
		return copyMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getPasteMenuItem() {
		if (pasteMenuItem == null) {
			pasteMenuItem = new JMenuItem();
			pasteMenuItem.setText("Paste");
			pasteMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_V,
					Event.CTRL_MASK, true));
		}
		return pasteMenuItem;
	}

	/**
	 * This method initializes jMenuItem	
	 * 	
	 * @return javax.swing.JMenuItem	
	 */
	private JMenuItem getSaveMenuItem() {
		if (saveMenuItem == null) {
			saveMenuItem = new JMenuItem();
			saveMenuItem.setText("Save");
			saveMenuItem.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S,
					Event.CTRL_MASK, true));
		}
		return saveMenuItem;
	}






/**
	 * This method initializes jDesktopPane	
	 * 	
	 * @return javax.swing.JDesktopPane	
	 */
	private JDesktopPane getJDesktopPane() {
		if (jDesktopPane == null) {
			jDesktopPane = new JDesktopPane();
			jDesktopPane.setBounds(new Rectangle(1, 0, 781, 537));
			jDesktopPane.setBackground(Color.YELLOW);
		}
		return jDesktopPane;
	}












public static void main(String[] args) {
	
	//hoofdmenu starten
	SwingUtilities.invokeLater(new Runnable() {
		public void run() {
			Hoofdmenu application = new Hoofdmenu();
			application.getJFrame().setVisible(true);
		}
	});
	
	
	
}
}
