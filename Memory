package memorygame;

import images.*;
import javax.swing.*;

import java.awt.*;
import java.awt.event.*;
import java.applet.*;
import java.util.Random;

/*
 * De images heb ik in een ander package ondergebracht, op de één of andere manier geeft JFrame deze niet weer.
 * Daar ga ik later nog mee aan de slag, op dit moment kom ik geen meter verder namelijk.
 */

public class Memory extends JFrame {

        static JLabel guessLabel = new JLabel();
        static JLabel label0 = new JLabel();
        static JLabel label1 = new JLabel();
        static JLabel label2 = new JLabel();
        static JLabel label3 = new JLabel();
        static JLabel label4 = new JLabel();
        static JLabel label5 = new JLabel();
        static JLabel label6 = new JLabel();
        static JLabel label7 = new JLabel();
        static JLabel label8 = new JLabel();
        static JLabel label9 = new JLabel();
        static JLabel label10 = new JLabel();
        static JLabel label11 = new JLabel();
        static JLabel label12 = new JLabel();
        static JLabel label13 = new JLabel();
        static JLabel label14 = new JLabel();
        static JLabel label15 = new JLabel();
        static JLabel[] boxLabel = new JLabel[16];
        static ImageIcon apple = new ImageIcon("images/apple.jpg");
        static ImageIcon banana = new ImageIcon("images/banana.jpg");
        static ImageIcon cherry = new ImageIcon("images/cherry.jpg");
        static ImageIcon grape = new ImageIcon("images/grape.jpg");
        static ImageIcon lemon = new ImageIcon("images/lemon.jpg");
        static ImageIcon orange = new ImageIcon("images/orange.jpg");
        static ImageIcon pear = new ImageIcon("images/pear.jpg");
        static ImageIcon plum = new ImageIcon("images/plum.jpg");
        static ImageIcon backing = new ImageIcon("images/backing.jpg");
        static ImageIcon[] choiceIcon = new ImageIcon[8];
        static JButton newButton = new JButton();
        static JButton exitButton = new JButton();
        static Random myRandom = new Random();

  static int choice;
  static int index;
  static int[] picked = new int[2];
  static int[] behind = new int[16];
  static int guesses;
  static int remaining;

        static Timer delayTimer;

        public static void main(String args[]) 

  {

    // create frame

    //new Memory().show();

      Memory MemoryFrame = new Memory();
      MemoryFrame.setVisible(true);
    

      //label0.setIcon(choiceIcon[0]);
      //label1.setIcon(choiceIcon[1]);
      


    // start first game

    newButton.doClick();

  }



  public Memory() 

  {

    // frame constructor

    setTitle("Memory spel");

   // setResizable(false);

    getContentPane().setBackground(Color.GRAY);

    addWindowListener(new WindowAdapter() 

    {

      public void windowClosing(WindowEvent evt) 

      {

        exitForm(evt);

      }

    });

    getContentPane().setLayout(new GridBagLayout());

    

    // position controls

    GridBagConstraints gridConstraints = new GridBagConstraints();

    guessLabel.setText("Pogingen: 0");

    guessLabel.setForeground(Color.WHITE);

    guessLabel.setFont(new Font("Arial", Font.BOLD, 15));

        gridConstraints.gridx = 1;

        gridConstraints.gridy = 0;

        gridConstraints.gridwidth = 2;

        gridConstraints.insets = new Insets(10, 10, 10, 10);

        getContentPane().add(guessLabel, gridConstraints);

    boxLabel[0] = label0;
    boxLabel[1] = label1;
    boxLabel[2] = label2;
    boxLabel[3] = label3;
    boxLabel[4] = label4;
    boxLabel[5] = label5;
    boxLabel[6] = label6;
    boxLabel[7] = label7;
    boxLabel[8] = label8;
    boxLabel[9] = label9;
    boxLabel[10] = label10;
    boxLabel[11] = label11;
    boxLabel[12] = label12;
    boxLabel[13] = label13;
    boxLabel[14] = label14;
    boxLabel[15] = label15;

    int x = 0;

    int y = 1;

    for (int i = 0; i < 15; i++)

    {

                        gridConstraints = new GridBagConstraints();

        boxLabel[i].setPreferredSize(new Dimension(70, 70));

        boxLabel[i].setIcon(backing);

        gridConstraints.gridx = x;

        gridConstraints.gridy = y;

        gridConstraints.insets = new Insets(5, 5, 5, 5);

        getContentPane().add(boxLabel[i], gridConstraints);

                        boxLabel[i].addMouseListener(new MouseAdapter() 

                        {

                        public void mouseClicked(MouseEvent e) 

                        {

                        labelMouseClicked(e);

                        }

                        });

                        x++;

                        if (x > 3)

                        {

                                x = 0;

                                y++;

                        }

        }

        

        newButton.setText("Nieuw spel");

    gridConstraints = new GridBagConstraints();

    gridConstraints.gridx = 1;

    gridConstraints.gridy = 6;

    gridConstraints.gridwidth = 2;

    gridConstraints.insets = new Insets(10, 10, 10, 10);

    getContentPane().add(newButton, gridConstraints);

    newButton.addActionListener(new ActionListener() 

    {

      public void actionPerformed(ActionEvent e) 

      {

        newButtonActionPerformed(e);

      }

    });

        exitButton.setText("Verlaat spel");

    gridConstraints = new GridBagConstraints();

    gridConstraints.gridx = 1;

    gridConstraints.gridy = 7;

    gridConstraints.gridwidth = 2;

    gridConstraints.insets = new Insets(0, 10, 10, 10);

    getContentPane().add(exitButton, gridConstraints);

    exitButton.addActionListener(new ActionListener() 

    {

      public void actionPerformed(ActionEvent e) 

      {

        exitButtonActionPerformed(e);

      }

    });



                delayTimer = new Timer(1, new ActionListener() 

                {

                public void actionPerformed(ActionEvent e) 

                {

                delayTimerActionPerformed(e);

                }

                });

    pack();

    Dimension screenSize = Toolkit.getDefaultToolkit().getScreenSize();

    setBounds((int) (0.5 * (screenSize.width - getWidth())), (int) (0.5 * (screenSize.height - getHeight())), getWidth(), getHeight());
    

    choiceIcon[0] = apple;
    choiceIcon[1] = banana;
    choiceIcon[2] = cherry;
    choiceIcon[3] = grape;
    choiceIcon[4] = lemon;
    choiceIcon[5] = orange;
    choiceIcon[6] = pear;
    choiceIcon[7] = plum;

  }



        private void labelMouseClicked(MouseEvent e)

        {

                Component clickedComponent = e.getComponent();

                for (index = 0; index < 16; index++)

                {

                        if (clickedComponent == boxLabel[index])

                        {

                                break;

                        }

                }

    // If trying to pick same box, picking already selected box

    // or trying pick when not playing, exit

    if ((choice == 1 && index == picked[0]) || behind[index] == -1 || newButton.isEnabled())

    {

        return;

    }

    // Display selected picture

    boxLabel[index].setIcon(choiceIcon[behind[index]]);

    if (choice == 0)

    {

      picked[0] = index;

      choice = 1;

      return;

    }

    // use timer to process remaining code to allow

    // label control to refresh

    delayTimer.start();

        }

        private void newButtonActionPerformed(ActionEvent e)

        {

                guesses = 0;

                remaining = 8;

    guessLabel.setText("Pogingen: 0");

    // Randomly sort 16 integers using Shuffle routine

    // Behind contains indexes (0 to 7) for hidden pictures

    behind = sortIntegers(16);

    for (int i = 0; i < 16; i++)

    {

      // reset image

      boxLabel[i].setIcon(backing);

      if (behind[i] > 7)

      {

        behind[i] = behind[i] - 8;

      }

    }

    choice = 0;

    newButton.setEnabled(false);

    exitButton.setText("Stop");

        }



        private void exitButtonActionPerformed(ActionEvent e)

        {

    if (exitButton.getText().equals("Exit"))

    {

        exitForm(null);

    }

    else

    {

      exitButton.setText("Exit");

      newButton.setEnabled(true);

    }

        }



  private void exitForm(WindowEvent evt) 

  {

    System.exit(0);

  }

  

  private void delayTimerActionPerformed(ActionEvent e)

  {

        // finish processing of display

        delayTimer.stop();

        guesses++;

    guessLabel.setText("Guesses: " + String.valueOf(guesses));

    picked[1] = index;

    if (behind[picked[0]] == behind[picked[1]])

    {

      // If match, play sound

      behind[picked[0]] = -1;

      behind[picked[1]] = -1;

      remaining--;

    }

    else

    {

      // delay 1 second

      long t = System.currentTimeMillis();

      do {} while (System.currentTimeMillis() - t < 1000);

      boxLabel[picked[0]].setIcon(backing);

      boxLabel[picked[1]].setIcon(backing);
    }

    choice = 0;

    if (remaining == 0)

    {

      exitButton.doClick();

      newButton.requestFocus();

    }

  }



  

  private static int[] sortIntegers(int n)

        {

        /*

        *  Returns n randomly sorted integers 0 -> n - 1

        */

        int nArray[] = new int[n];

        int temp, s;

        Random myRandom = new Random();

        //  initialize array from 0 to n - 1

        for (int i = 0; i < n; i++)

        {

        nArray[i] = i;

        }

        //  i is number of items remaining in list

        for (int i = n; i >= 1; i--)

        {

        s = myRandom.nextInt(i);

        temp = nArray[s];

        nArray[s] = nArray[i - 1];

        nArray[i - 1] = temp;

        }

        return(nArray);

        }



}
